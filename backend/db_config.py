# db_config.py

import os
from pymongo import MongoClient
from dotenv import load_dotenv
from typing import List, Dict, Any, Optional
from bson.objectid import ObjectId
from pymongo.errors import ConnectionFailure

# Load environment variables from the .env file
load_dotenv()

# --- Connection ---
MONGO_URI = os.getenv("MONGO_URI")
if not MONGO_URI:
    # This will be caught when the file is imported if .env is missing or key is empty
    raise EnvironmentError("MONGO_URI is not set in environment variables.")

# Attempt to establish the connection
try:
    client = MongoClient(MONGO_URI)
    # The database name defined in the URI and used in the application
    db = client["HackMateAI"]
    
    # Collection references (Collections are created implicitly on first data insertion)
    users_col = db["users"]
    teams_col = db["teams"]
    tasks_col = db["tasks"]
    
    # Optional: Ping the database to confirm the connection is truly open
    client.admin.command('ping')
    print("✅ MongoDB Atlas connection established and collections loaded.")

except ConnectionFailure as e:
    print(f"❌ ERROR: MongoDB connection failed. Please check MONGO_URI, IP Whitelist, and password. Error: {e}")
    # For a hackathon, let's allow the app to run with a message, but you could exit here:
    # raise SystemExit(1)
except Exception as e:
    print(f"ERROR: An unexpected error occurred during MongoDB setup: {e}")

# --- USER Functions ---

def insert_user(user_data: Dict[str, Any]) -> str:
    """Inserts a new user profile."""
    result = users_col.insert_one(user_data)
    return str(result.inserted_id)

def find_user_by_email(email: str) -> Optional[Dict[str, Any]]:
    """Finds a single user by email, excluding the internal MongoDB _id."""
    return users_col.find_one({"email": email}, {"_id": 0}) 

def find_all_users() -> List[Dict[str, Any]]:
    """Retrieves all user records, excluding the MongoDB _id."""
    users_list = list(users_col.find({}, {"_id": 0}))
    return users_list

def find_all_match_candidates(current_user_email: str) -> List[Dict[str, Any]]:
    """Retrieves users who are not the current user and are not yet on a team."""
    candidates = list(users_col.find(
        # Exclude the current user AND users who already have a team_id
        {"email": {"$ne": current_user_email}, "team_id": {"$exists": False}}, 
        {"_id": 0}
    ))
    return candidates

# --- TEAM Functions ---

def create_team(team_data: Dict[str, Any], member_emails: List[str]) -> str:
    """
    Creates a new team record and updates member users with the new team_id.
    """
    # 1. Insert the team record
    result = teams_col.insert_one(team_data)
    team_id = str(result.inserted_id)

    # 2. Update all member users with the new team_id
    users_col.update_many(
        {"email": {"$in": member_emails}},
        {"$set": {"team_id": team_id}}
    )
    return team_id

def get_team_details(team_id: str) -> Optional[Dict[str, Any]]:
    """Retrieves a single team by its MongoDB ID."""
    try:
        # We must convert the string team_id back to ObjectId to search by _id
        team = teams_col.find_one({"_id": ObjectId(team_id)}, {"_id": 0})
        return team
    except Exception:
        # Handles case where the ID string is not a valid ObjectId
        return None

# --- TASK Functions ---

def insert_tasks(tasks_list: List[Dict[str, Any]]) -> List[str]:
    """Inserts a list of tasks generated by Agentuity."""
    if tasks_list:
        result = tasks_col.insert_many(tasks_list)
        return [str(id) for id in result.inserted_ids]
    return []

def get_tasks_by_team(team_id: str) -> List[Dict[str, Any]]:
    """Retrieves all tasks for a specific team, excluding the MongoDB _id."""
    tasks_list = list(tasks_col.find({"team_id": team_id}, {"_id": 0}))
    return tasks_list


def update_task_status(task_id: str, new_status: str) -> bool:
    """Updates the status of a specific task (used for Agentuity webhook sync)."""
    try:
        # Assumes the task_id being passed is the MongoDB ObjectId string
        result = tasks_col.update_one(
            {"_id": ObjectId(task_id)},
            {"$set": {"status": new_status}}
        )
        return result.modified_count > 0
    except Exception:
        # Log this error if necessary, but return False on failure
        return False