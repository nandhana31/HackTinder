# backend/db_config.py (FINAL COMPLETE VERSION)

import os
from pymongo import MongoClient
from dotenv import load_dotenv
from typing import List, Dict, Any, Optional
from bson.objectid import ObjectId
from pymongo.errors import ConnectionFailure

# Load environment variables
load_dotenv()
MONGO_URI = os.getenv("MONGO_URI")

if not MONGO_URI:
    raise EnvironmentError("MONGO_URI is not set in environment variables.")

# --- CONNECTION ---
try:
    client = MongoClient(MONGO_URI)
    db = client["HackMateAI"]
    
    # Collection references
    users_col = db["users"]
    teams_col = db["teams"]
    tasks_col = db["tasks"]
    
    # Verify connection is open
    client.admin.command('ping')
    print("✅ MongoDB Atlas connection established and collections loaded.")

except ConnectionFailure as e:
    print(f"❌ ERROR: MongoDB connection failed. Error: {e}")
except Exception as e:
    print(f"ERROR: An unexpected error occurred during MongoDB setup: {e}")

# --- USER Functions ---
def insert_user(user_data: Dict[str, Any]) -> str:
    """Inserts a new user profile (POST /register)."""
    result = users_col.insert_one(user_data)
    return str(result.inserted_id)

def find_user_by_email(email: str) -> Optional[Dict[str, Any]]:
    """Finds a single user by email (used by /match)."""
    return users_col.find_one({"email": email}, {"_id": 0}) 

def find_all_users() -> List[Dict[str, Any]]:
    """Retrieves all user records (used by GET /users)."""
    users_list = list(users_col.find({}, {"_id": 0}))
    return users_list

def find_all_match_candidates(current_user_email: str) -> List[Dict[str, Any]]:
    """Retrieves users who are available for matching (not already on a team)."""
    candidates = list(users_col.find(
        {"email": {"$ne": current_user_email}, "team_id": {"$exists": False}}, 
        {"_id": 0}
    ))
    return candidates

def update_user_profile_data(email: str, update_data: Dict[str, Any]) -> bool:
    """Updates user data, including AI-extracted skills and links (PUT /profile/update)."""
    update_data.pop('email', None) 
    # Only update provided fields
    clean_data = {k: v for k, v in update_data.items() if v is not None}
    
    if not clean_data: return False

    try:
        result = users_col.update_one({"email": email}, {"$set": clean_data})
        return result.modified_count > 0
    except Exception as e:
        print(f"Error updating user profile for {email}: {e}")
        return False

# --- TEAM Functions ---
def create_team(team_data: Dict[str, Any], member_emails: List[str]) -> str:
    """
    Creates a new team record and updates member users with the new team_id 
    (POST /createTeam).
    """
    # 1. Insert the team record
    result = teams_col.insert_one(team_data)
    team_id = str(result.inserted_id)
    
    # 2. Update users: CRITICAL step to assign team_id to members
    users_col.update_many(
        {"email": {"$in": member_emails}},
        {"$set": {"team_id": team_id}}
    )
    return team_id

# --- TASK Functions ---
def insert_tasks(tasks_list: List[Dict[str, Any]]) -> List[str]:
    """Inserts a list of tasks generated by Agentuity (POST /createTeam)."""
    if tasks_list:
        result = tasks_col.insert_many(tasks_list)
        return [str(id) for id in result.inserted_ids]
    return []